//
//  Style.swift
//  RenderTodoDemo
//
//  Created by Alex Usbergo on 25/04/16.
//  Copyright Â© 2016 Alex Usbergo. All rights reserved.
//

///Autogenerated file
///See github.com/alexdrone/s

import UIKit

private var __ApperanceProxyHandle: UInt8 = 0

///Your view should conform to 'AppearaceProxyComponent' in order to expose an appearance proxy
public protocol AppearaceProxyComponent: class {
    associatedtype ApperanceProxyType
    var appearanceProxy: ApperanceProxyType { get }
    func didChangeAppearanceProxy()
}

///Entry point for the app stylesheet
public class S {
    
    //MARK: - Login
    public static let Album = AlbumAppearanceProxy()
    public class AlbumAppearanceProxy {
        
        //MARK: containerPadding
        private var _containerPadding: UIEdgeInsets?
        private func containerPaddingProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIEdgeInsets {
            if let override = _containerPadding { return override }
            return UIEdgeInsets(top: 64.0, left: 0.0, bottom: 64.0, right: 0.0)
        }
        public var containerPadding: UIEdgeInsets {
            get { return self.containerPaddingProperty() }
            set { _containerPadding = newValue }
        }
        
        //MARK: defaultBorderWidth
        private var _defaultBorderWidth: CGFloat?
        private func defaultBorderWidthProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGFloat {
            if let override = _defaultBorderWidth { return override }
            return CGFloat(2.0)
        }
        public var defaultBorderWidth: CGFloat {
            get { return self.defaultBorderWidthProperty() }
            set { _defaultBorderWidth = newValue }
        }
        
        //MARK: smallMargin
        private var _smallMargin: CGFloat?
        private func smallMarginProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGFloat {
            if let override = _smallMargin { return override }
            return CGFloat(4.0)
        }
        public var smallMargin: CGFloat {
            get { return self.smallMarginProperty() }
            set { _smallMargin = newValue }
        }
        
        //MARK: marginInBetweenElements
        private var _marginInBetweenElements: CGFloat?
        public func marginInBetweenElementsProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGFloat {
            if let override = _marginInBetweenElements { return override }
            if UIScreen.mainScreen().bounds.size.height < 480.0  {
                return CGFloat(2.0)
            }
            
            return CGFloat(4.0)
        }
        public var marginInBetweenElements: CGFloat {
            get { return self.marginInBetweenElementsProperty() }
            set { _marginInBetweenElements = newValue }
        }
        
        //MARK: minSizeForButton
        private var _minSizeForButton: CGSize?
        private func minSizeForButtonProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGSize {
            if let override = _minSizeForButton { return override }
            return CGSize(width: 296.0, height: 36.0)
        }
        public var minSizeForButton: CGSize {
            get { return self.minSizeForButtonProperty() }
            set { _minSizeForButton = newValue }
        }
        
        //MARK: margin
        private var _margin: CGFloat?
        private func marginProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGFloat {
            if let override = _margin { return override }
            return CGFloat(16.0)
        }
        public var margin: CGFloat {
            get { return self.marginProperty() }
            set { _margin = newValue }
        }
        
        //MARK: defaultRadius
        private var _defaultRadius: CGFloat?
        private func defaultRadiusProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGFloat {
            if let override = _defaultRadius { return override }
            return CGFloat(18.0)
        }
        public var defaultRadius: CGFloat {
            get { return self.defaultRadiusProperty() }
            set { _defaultRadius = newValue }
        }
    }
    //MARK: - Color
    public static let Color = ColorAppearanceProxy()
    public class ColorAppearanceProxy {
        
        //MARK: blue
        private var _blue: UIColor?
        private func blueProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
            if let override = _blue { return override }
            return UIColor(red: 0.235294, green: 0.419608, blue: 0.631373, alpha: 1.0)
        }
        public var blue: UIColor {
            get { return self.blueProperty() }
            set { _blue = newValue }
        }
        
        //MARK: purple
        private var _purple: UIColor?
        private func purpleProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
            if let override = _purple { return override }
            return UIColor(red: 0.447059, green: 0.113725, blue: 0.756863, alpha: 1.0)
        }
        public var purple: UIColor {
            get { return self.purpleProperty() }
            set { _purple = newValue }
        }
        
        //MARK: cyan
        private var _cyan: UIColor?
        private func cyanProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
            if let override = _cyan { return override }
            return UIColor(red: 0.309804, green: 0.890196, blue: 0.756863, alpha: 1.0)
        }
        public var cyan: UIColor {
            get { return self.cyanProperty() }
            set { _cyan = newValue }
        }
        
        //MARK: black
        private var _black: UIColor?
        private func blackProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
            if let override = _black { return override }
            return UIColor(red: 0.156863, green: 0.156863, blue: 0.156863, alpha: 1.0)
        }
        public var black: UIColor {
            get { return self.blackProperty() }
            set { _black = newValue }
        }
        
        //MARK: green
        private var _green: UIColor?
        private func greenProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
            if let override = _green { return override }
            return UIColor(red: 0.552941, green: 0.690196, blue: 0.431373, alpha: 1.0)
        }
        public var green: UIColor {
            get { return self.greenProperty() }
            set { _green = newValue }
        }
        
        //MARK: white
        private var _white: UIColor?
        private func whiteProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
            if let override = _white { return override }
            return UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
        }
        public var white: UIColor {
            get { return self.whiteProperty() }
            set { _white = newValue }
        }
        
        //MARK: red
        private var _red: UIColor?
        private func redProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
            if let override = _red { return override }
            return UIColor(red: 0.713726, green: 0.235294, blue: 0.388235, alpha: 1.0)
        }
        public var red: UIColor {
            get { return self.redProperty() }
            set { _red = newValue }
        }
        
        //MARK: gray
        private var _gray: UIColor?
        private func grayProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
            if let override = _gray { return override }
            return UIColor(red: 0.239216, green: 0.239216, blue: 0.239216, alpha: 1.0)
        }
        public var gray: UIColor {
            get { return self.grayProperty() }
            set { _gray = newValue }
        }
    }
    //MARK: - Typography
    public static let Typography = TypographyAppearanceProxy()
    public class TypographyAppearanceProxy {
        
        //MARK: mediumLarge
        private var _mediumLarge: UIFont?
        private func mediumLargeProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _mediumLarge { return override }
            return UIFont.systemFontOfSize(22.0)
        }
        public var mediumLarge: UIFont {
            get { return self.mediumLargeProperty() }
            set { _mediumLarge = newValue }
        }
        
        //MARK: extraSmallSemibold
        private var _extraSmallSemibold: UIFont?
        private func extraSmallSemiboldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _extraSmallSemibold { return override }
            return UIFont.systemFontOfSize(12.0, weight: UIFontWeightSemibold)
        }
        public var extraSmallSemibold: UIFont {
            get { return self.extraSmallSemiboldProperty() }
            set { _extraSmallSemibold = newValue }
        }
        
        //MARK: superSuperSmallSemibold
        private var _superSuperSmallSemibold: UIFont?
        private func superSuperSmallSemiboldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _superSuperSmallSemibold { return override }
            return UIFont.systemFontOfSize(8.0, weight: UIFontWeightSemibold)
        }
        public var superSuperSmallSemibold: UIFont {
            get { return self.superSuperSmallSemiboldProperty() }
            set { _superSuperSmallSemibold = newValue }
        }
        
        //MARK: mediumLargeBold
        private var _mediumLargeBold: UIFont?
        private func mediumLargeBoldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _mediumLargeBold { return override }
            return UIFont.systemFontOfSize(22.0, weight: UIFontWeightBold)
        }
        public var mediumLargeBold: UIFont {
            get { return self.mediumLargeBoldProperty() }
            set { _mediumLargeBold = newValue }
        }
        
        //MARK: superSuperSmall
        private var _superSuperSmall: UIFont?
        private func superSuperSmallProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _superSuperSmall { return override }
            return UIFont.systemFontOfSize(8.0)
        }
        public var superSuperSmall: UIFont {
            get { return self.superSuperSmallProperty() }
            set { _superSuperSmall = newValue }
        }
        
        //MARK: mediumLight
        private var _mediumLight: UIFont?
        private func mediumLightProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _mediumLight { return override }
            return UIFont.systemFontOfSize(18.0, weight: UIFontWeightLight)
        }
        public var mediumLight: UIFont {
            get { return self.mediumLightProperty() }
            set { _mediumLight = newValue }
        }
        
        //MARK: mediumBold
        private var _mediumBold: UIFont?
        private func mediumBoldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _mediumBold { return override }
            return UIFont.systemFontOfSize(18.0, weight: UIFontWeightBold)
        }
        public var mediumBold: UIFont {
            get { return self.mediumBoldProperty() }
            set { _mediumBold = newValue }
        }
        
        //MARK: superSmallSemibold
        private var _superSmallSemibold: UIFont?
        private func superSmallSemiboldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _superSmallSemibold { return override }
            return UIFont.systemFontOfSize(10.0, weight: UIFontWeightSemibold)
        }
        public var superSmallSemibold: UIFont {
            get { return self.superSmallSemiboldProperty() }
            set { _superSmallSemibold = newValue }
        }
        
        //MARK: extraSmall
        private var _extraSmall: UIFont?
        private func extraSmallProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _extraSmall { return override }
            return UIFont.systemFontOfSize(12.0)
        }
        public var extraSmall: UIFont {
            get { return self.extraSmallProperty() }
            set { _extraSmall = newValue }
        }
        
        //MARK: mediumLargeSemibold
        private var _mediumLargeSemibold: UIFont?
        private func mediumLargeSemiboldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _mediumLargeSemibold { return override }
            return UIFont.systemFontOfSize(22.0, weight: UIFontWeightSemibold)
        }
        public var mediumLargeSemibold: UIFont {
            get { return self.mediumLargeSemiboldProperty() }
            set { _mediumLargeSemibold = newValue }
        }
        
        //MARK: superSuperSmallBold
        private var _superSuperSmallBold: UIFont?
        private func superSuperSmallBoldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _superSuperSmallBold { return override }
            return UIFont.systemFontOfSize(8.0, weight: UIFontWeightBold)
        }
        public var superSuperSmallBold: UIFont {
            get { return self.superSuperSmallBoldProperty() }
            set { _superSuperSmallBold = newValue }
        }
        
        //MARK: mediumSemibold
        private var _mediumSemibold: UIFont?
        private func mediumSemiboldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _mediumSemibold { return override }
            return UIFont.systemFontOfSize(18.0, weight: UIFontWeightSemibold)
        }
        public var mediumSemibold: UIFont {
            get { return self.mediumSemiboldProperty() }
            set { _mediumSemibold = newValue }
        }
        
        //MARK: superSmall
        private var _superSmall: UIFont?
        private func superSmallProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _superSmall { return override }
            return UIFont.systemFontOfSize(10.0)
        }
        public var superSmall: UIFont {
            get { return self.superSmallProperty() }
            set { _superSmall = newValue }
        }
        
        //MARK: smallLight
        private var _smallLight: UIFont?
        private func smallLightProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _smallLight { return override }
            return UIFont.systemFontOfSize(14.0, weight: UIFontWeightLight)
        }
        public var smallLight: UIFont {
            get { return self.smallLightProperty() }
            set { _smallLight = newValue }
        }
        
        //MARK: small
        private var _small: UIFont?
        private func smallProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _small { return override }
            return UIFont.systemFontOfSize(14.0)
        }
        public var small: UIFont {
            get { return self.smallProperty() }
            set { _small = newValue }
        }
        
        //MARK: smallBold
        private var _smallBold: UIFont?
        private func smallBoldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _smallBold { return override }
            return UIFont.systemFontOfSize(14.0, weight: UIFontWeightBold)
        }
        public var smallBold: UIFont {
            get { return self.smallBoldProperty() }
            set { _smallBold = newValue }
        }
        
        //MARK: smallSemibold
        private var _smallSemibold: UIFont?
        private func smallSemiboldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _smallSemibold { return override }
            return UIFont.systemFontOfSize(14.0, weight: UIFontWeightSemibold)
        }
        public var smallSemibold: UIFont {
            get { return self.smallSemiboldProperty() }
            set { _smallSemibold = newValue }
        }
        
        //MARK: extraSmallBold 
        private var _extraSmallBold: UIFont?
        private func extraSmallBoldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _extraSmallBold { return override }
            return UIFont.systemFontOfSize(12.0, weight: UIFontWeightBold)
        }
        public var extraSmallBold: UIFont {
            get { return self.extraSmallBoldProperty() }
            set { _extraSmallBold = newValue }
        }
        
        //MARK: extraSmallLight 
        private var _extraSmallLight: UIFont?
        private func extraSmallLightProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _extraSmallLight { return override }
            return UIFont.systemFontOfSize(12.0, weight: UIFontWeightLight)
        }
        public var extraSmallLight: UIFont {
            get { return self.extraSmallLightProperty() }
            set { _extraSmallLight = newValue }
        }
        
        //MARK: medium 
        private var _medium: UIFont?
        private func mediumProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _medium { return override }
            return UIFont.systemFontOfSize(18.0)
        }
        public var medium: UIFont {
            get { return self.mediumProperty() }
            set { _medium = newValue }
        }
        
        //MARK: mediumLargeThin 
        private var _mediumLargeThin: UIFont?
        private func mediumLargeThinProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _mediumLargeThin { return override }
            return UIFont.systemFontOfSize(22.0, weight: UIFontWeightThin)
        }
        public var mediumLargeThin: UIFont {
            get { return self.mediumLargeThinProperty() }
            set { _mediumLargeThin = newValue }
        }
        
        //MARK: mediumLargeLight 
        private var _mediumLargeLight: UIFont?
        private func mediumLargeLightProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _mediumLargeLight { return override }
            return UIFont.systemFontOfSize(22.0, weight: UIFontWeightLight)
        }
        public var mediumLargeLight: UIFont {
            get { return self.mediumLargeLightProperty() }
            set { _mediumLargeLight = newValue }
        }
        
        //MARK: superSmallBold 
        private var _superSmallBold: UIFont?
        private func superSmallBoldProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
            if let override = _superSmallBold { return override }
            return UIFont.systemFontOfSize(10.0, weight: UIFontWeightBold)
        }
        public var superSmallBold: UIFont {
            get { return self.superSmallBoldProperty() }
            set { _superSmallBold = newValue }
        }
    }
    
}