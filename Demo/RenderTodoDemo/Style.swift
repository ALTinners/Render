//
//  Style.swift
//  RenderTodoDemo
//
//  Created by Alex Usbergo on 25/04/16.
//  Copyright Â© 2016 Alex Usbergo. All rights reserved.
//

///Autogenerated file
///See github.com/alexdrone/s

import UIKit
import Render

private var __ApperanceProxyHandle: UInt8 = 0

///Your view should conform to 'AppearaceProxyComponent' in order to expose an appearance proxy
public protocol AppearaceProxyComponent: class {
  associatedtype ApperanceProxyType
  var appearanceProxy: ApperanceProxyType { get }
  func didChangeAppearanceProxy()
}

///Entry point for the app stylesheet
open class S {

  //MARK: - Login
  open static let Album = AlbumAppearanceProxy()
  open class AlbumAppearanceProxy {

    //MARK: marginInBetweenElements
    fileprivate var _marginInBetweenElements: CGFloat?
    open func marginInBetweenElementsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
      if let override = _marginInBetweenElements { return override }
      if UIScreen.main.bounds.size.height < 480.0  {
        return CGFloat(2.0)
      }

      return CGFloat(4.0)
    }
    open var marginInBetweenElements: CGFloat {
      get { return self.marginInBetweenElementsProperty() }
      set { _marginInBetweenElements = newValue }
    }

    //MARK: margin
    fileprivate var _margin: CGFloat?
    fileprivate func marginProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
      if let override = _margin { return override }
      return CGFloat(16.0)
    }
    open var margin: CGFloat {
      get { return self.marginProperty() }
      set { _margin = newValue }
    }
  }

  //MARK: - Color
  open static let Color = ColorAppearanceProxy()
  open class ColorAppearanceProxy {

    //MARK: black
    fileprivate var _black: UIColor?
    fileprivate func blackProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
      if let override = _black { return override }
      return UIColor(red: 0.156863, green: 0.156863, blue: 0.156863, alpha: 1.0)
    }
    open var black: UIColor {
      get { return self.blackProperty() }
      set { _black = newValue }
    }

    //MARK: white
    fileprivate var _white: UIColor?
    fileprivate func whiteProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
      if let override = _white { return override }
      return UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
    }
    open var white: UIColor {
      get { return self.whiteProperty() }
      set { _white = newValue }
    }

  }
  //MARK: - Typography
  open static let Typography = TypographyAppearanceProxy()
  open class TypographyAppearanceProxy {

    //MARK: mediumBold
    fileprivate var _mediumBold: UIFont?
    fileprivate func mediumBoldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
      if let override = _mediumBold { return override }
      return UIFont.systemFont(ofSize: 18.0, weight: UIFontWeightBold)
    }
    open var mediumBold: UIFont {
      get { return self.mediumBoldProperty() }
      set { _mediumBold = newValue }
    }

    //MARK: extraSmallLight
    fileprivate var _extraSmallLight: UIFont?
    fileprivate func extraSmallLightProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
      if let override = _extraSmallLight { return override }
      return UIFont.systemFont(ofSize: 12.0, weight: UIFontWeightLight)
    }
    open var extraSmallLight: UIFont {
      get { return self.extraSmallLightProperty() }
      set { _extraSmallLight = newValue }
    }

    //MARK: medium
    fileprivate var _medium: UIFont?
    fileprivate func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
      if let override = _medium { return override }
      return UIFont.systemFont(ofSize: 18.0)
    }
    open var medium: UIFont {
      get { return self.mediumProperty() }
      set { _medium = newValue }
    }

    //MARK: superSmallBold
    fileprivate var _superSmallBold: UIFont?
    fileprivate func superSmallBoldProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
      if let override = _superSmallBold { return override }
      return UIFont.systemFont(ofSize: 10.0, weight: UIFontWeightBold)
    }
    open var superSmallBold: UIFont {
      get { return self.superSmallBoldProperty() }
      set { _superSmallBold = newValue }
    }
  }
}

